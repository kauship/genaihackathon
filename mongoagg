import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoCollection;
import org.bson.Document;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public static List<String> findMatchingKeysOptimized(Map<String, String> incomingMessage, MongoCollection<Document> collection) {
    List<Document> pipeline = new ArrayList<>();

    // Step 1: Unwind attributes
    pipeline.add(new Document("$unwind", "$attributes"));

    // Step 2: Filter only attributes that exist in the incoming message
    List<Document> matchConditions = new ArrayList<>();
    for (Map.Entry<String, String> entry : incomingMessage.entrySet()) {
        matchConditions.add(new Document("attributes." + entry.getKey(), entry.getValue()));
    }
    pipeline.add(new Document("$match", new Document("$or", matchConditions)));

    // Step 3: Group by _id (primary key), count matches
    pipeline.add(new Document("$group",
        new Document("_id", "$_id")
            .append("matchCount", new Document("$sum", 1))
            .append("totalAttributes", new Document("$first", new Document("$size", new Document("$objectToArray", "$attributes"))))
    ));

    // Step 4: Ensure all stored attributes were matched
    pipeline.add(new Document("$match", new Document("$expr",
        new Document("$eq", List.of("$matchCount", "$totalAttributes"))
    )));

    // Execute aggregation
    AggregateIterable<Document> result = collection.aggregate(pipeline);

    // Convert to List
    List<String> matchingKeys = new ArrayList<>();
    for (Document doc : result) {
        matchingKeys.add(doc.getString("_id"));
    }
    return matchingKeys;
}
